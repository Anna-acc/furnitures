// <auto-generated />
using System;
using FurnitureBy.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FurnitureBy.Data.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20220503073457_StartMigration")]
    partial class StartMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FurnitureBy.Data.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsShow")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Order", b =>
                {
                    b.Property<string>("NumberOrder")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdUser")
                        .HasColumnType("text");

                    b.Property<string>("NamePerson")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("NumberOrder");

                    b.HasIndex("IdUser");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.OrderProducts", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CodeProduct")
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("NumberOrder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CodeProduct");

                    b.HasIndex("NumberOrder");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Product", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Gear")
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvaible")
                        .HasColumnType("boolean");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Code");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.ProductCategories", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("CodeProduct")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CodeProduct");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Модератор"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Клиент"
                        });
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "2F0D1327-8965-4D21-BC2E-3012348C8008",
                            DateBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsConfirm = true,
                            Login = "Admin",
                            Name = "Admin",
                            Password = "1111",
                            RoleId = 1,
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Order", b =>
                {
                    b.HasOne("FurnitureBy.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.OrderProducts", b =>
                {
                    b.HasOne("FurnitureBy.Data.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("CodeProduct");

                    b.HasOne("FurnitureBy.Data.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("NumberOrder");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.ProductCategories", b =>
                {
                    b.HasOne("FurnitureBy.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("FurnitureBy.Data.Entities.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("CodeProduct");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.User", b =>
                {
                    b.HasOne("FurnitureBy.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Product", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FurnitureBy.Data.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
